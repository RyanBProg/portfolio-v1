---
import TechBadge from "../TechBadge.astro";
import badges from "../../collections/techBadges";

interface Props {
  articleId: string;
  features: string[];
  futureOptimisations: string[];
  techStack: string[];
}

const { articleId, features, futureOptimisations, techStack } = Astro.props;

const projectBadges = badges.filter((badge) => techStack.includes(badge.title));
---

<div>
  <div class="border-y">
    <button
      id={`tech-stack-btn-${articleId}`}
      aria-label="toggle tech stack accordian"
      aria-expanded="false"
      aria-controls={`tech-stack-content-${articleId}`}
      class="text-lg tracking-tight font-semibold py-4 px-2 w-full flex justify-between items-center hover:bg-black hover:text-white transition-colors duration-500 ease-out focus:outline-4 focus:-outline-offset-4 focus:outline-black"
      ><span>TECH STACK</span><svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-chevron-down inline-block ml-4"
        ><path d="m6 9 6 6 6-6"></path></svg
      ></button
    >
    <div
      id={`tech-stack-content-${articleId}`}
      aria-hidden="true"
      class="h-0 overflow-hidden transition-[height] duration-300 ease-out"
    >
      <ul
        id={`tech-stack-content-${articleId}`}
        class="flex gap-2 flex-wrap py-2 h-fit"
        aria-label="Technologies used"
      >
        {
          projectBadges.map((badge) => (
            <li>
              <TechBadge
                title={badge.title}
                img={badge.img}
                alt={badge.alt}
                bgCol="bg-neutral-500/10"
              />
            </li>
          ))
        }
      </ul>
    </div>
  </div>
  <div class="border-b">
    <button
      id={`features-btn-${articleId}`}
      aria-label="toggle features accordian"
      aria-expanded="false"
      aria-controls={`features-content-${articleId}`}
      class="text-lg tracking-tight font-semibold py-4 px-2 w-full flex justify-between items-center hover:bg-black hover:text-white transition-colors duration-500 ease-out focus:outline-4 focus:-outline-offset-4 focus:outline-black"
      ><span>FEATURES</span><svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-chevron-down inline-block ml-4"
      >
        <path d="m6 9 6 6 6-6"></path>
      </svg>
    </button>
    <div
      id={`features-content-${articleId}`}
      aria-hidden="true"
      class="h-0 overflow-hidden transition-[height] duration-300 ease-out"
    >
      <div class="py-2">
        {
          features.length > 0 ? (
            <ul class="flex flex-col gap-1">
              {features.map((feature) => (
                <li>{feature}</li>
              ))}
            </ul>
          ) : (
            "N/A"
          )
        }
      </div>
    </div>
  </div>
  <div class="border-b">
    <button
      id={`future-btn-${articleId}`}
      aria-label="toggle future optimisations accordian"
      aria-expanded="false"
      aria-controls={`future-content-${articleId}`}
      class="text-lg tracking-tight font-semibold py-4 px-2 w-full flex justify-between items-center hover:bg-black hover:text-white transition-colors duration-500 ease-out focus:outline-4 focus:-outline-offset-4 focus:outline-black"
      ><span>FUTURE OPTIMISATIONS</span><svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-chevron-down inline-block ml-4"
        ><path d="m6 9 6 6 6-6"></path></svg
      ></button
    >
    <div
      id={`future-content-${articleId}`}
      aria-hidden="true"
      class="h-0 overflow-hidden transition-[height] duration-300 ease-out"
    >
      <div class="py-2">
        {
          futureOptimisations.length > 0 ? (
            <ul class="flex flex-col gap-1">
              {futureOptimisations.map((item) => (
                <li>{item}</li>
              ))}
            </ul>
          ) : (
            "N/A"
          )
        }
      </div>
    </div>
  </div>
</div>

<script define:vars={{ articleId }}>
  const accordionButtons = [
    document.getElementById(`tech-stack-btn-${articleId}`),
    document.getElementById(`features-btn-${articleId}`),
    document.getElementById(`future-btn-${articleId}`),
  ];

  const accordionContents = [
    document.getElementById(`tech-stack-content-${articleId}`),
    document.getElementById(`features-content-${articleId}`),
    document.getElementById(`future-content-${articleId}`),
  ];

  let activeIndex = null;

  const closeAccordian = (index) => {
    const button = accordionButtons[index];
    button.setAttribute("aria-expanded", "false");
    button.querySelector("svg").classList.remove("rotate-180");
    button.classList.remove("bg-black", "text-white");
    const content = accordionContents[index];
    content.setAttribute("aria-hidden", "true");
    content.style.height = "0";
  };

  const openAccordian = (index) => {
    const button = accordionButtons[index];
    button.setAttribute("aria-expanded", "true");
    button.querySelector("svg").classList.add("rotate-180");
    button.classList.add("bg-black", "text-white");
    const content = accordionContents[index];
    content.setAttribute("aria-hidden", "false");
    content.style.height = content.scrollHeight + "px";
  };

  const toggleAccordion = (index) => {
    // close currently open section if it exists
    if (activeIndex !== null) {
      closeAccordian(activeIndex);
    }

    // if clicking the same button, just close it
    if (activeIndex === index) {
      activeIndex = null;
      return;
    }

    // open new section
    openAccordian(index);
    activeIndex = index;
  };

  // add click listeners to buttons
  accordionButtons.forEach((button, index) => {
    button?.addEventListener("click", () => toggleAccordion(index));
  });
</script>
