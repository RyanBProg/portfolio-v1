---
import { getCollection } from "astro:content";
const projects = await getCollection("projectsCollection");

import Layout from "../layouts/Layout.astro";
import Article from "../components/projects/Article.astro";
import { Image } from "astro:assets";

const seo = {
  title: "Projects | Ryan Bowler",
  description:
    "Projects built and maintained by me (Ryan Bowler). Browse through carefully crafted applications that showcase expertise in front-end design, back-end architecture, and modern development practices.",
  image: "../assets/images/my-portfolio-cover-950x950.jpg",
  type: "website",
};
---

<Layout {seo}>
  <section class="lg:h-screen w-screen -mt-[86px]">
    <div class="h-full w-full flex flex-col lg:flex-row">
      <div class="slider-window">
        <h1
          class="absolute left-[86px] top-[30px] text-lg font-semibold tracking-tight"
        >
          PROJECTS
        </h1>
        <div class="h-[86px]">
          <!-- spacer for header -->
        </div>
        <div
          class="grow w-full text-center overflow-hidden relative"
          id="slider-container"
        >
          <div id="slider" class="slider">
            {
              projects.map((project, index) => (
                <div class="item" style={`--position: ${index + 1}`}>
                  <Image
                    src={project.data.image}
                    alt={project.data.title}
                    class="h-full w-full object-cover"
                    width={950}
                    height={950}
                    quality={90}
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>
      <div
        class="min-h-fit lg:h-full lg:w-1/2 flex flex-col-reverse lg:flex-col relative"
      >
        <div class="relative grow w-full z-30">
          <Article id="article_1" project={projects[0].data} />
          <Article id="article_2" project={projects[1].data} />
          <Article id="article_3" project={projects[2].data} />
          <Article id="article_4" project={projects[3].data} />
        </div>
        <div class="p-2 flex justify-between relative">
          <span
            id="prev_label"
            class="absolute top-1/2 -translate-y-1/2 left-16 text-xs max-w-min"
            >PREVIOUS PROJECT</span
          >
          <button
            id="prev_button"
            tabindex="0"
            aria-labelledby="prev_label"
            class="p-2 rounded-md text-white bg-black hover:bg-rose-700 hover:rounded-xl transition-all duration-700 ease-out disabled:hover:bg-neutral-400 disabled:bg-neutral-400 disabled:hover:rounded-md focus:outline-4 focus:outline-offset-4 focus:outline-black"
            ><svg
              xmlns="http://www.w3.org/2000/svg"
              width="28"
              height="28"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2.5"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-chevron-left"
              ><path d="m15 18-6-6 6-6"></path></svg
            ></button
          >
          <span
            id="next_label"
            class="absolute top-1/2 -translate-y-1/2 right-16 text-xs text-right max-w-min"
            >NEXT PROJECT</span
          >
          <button
            id="next_button"
            tabindex="0"
            aria-labelledby="next_label"
            class="p-2 rounded-md text-white bg-black hover:bg-rose-700 hover:rounded-xl transition-all duration-700 ease-out disabled:hover:bg-neutral-400 disabled:bg-neutral-400 disabled:hover:rounded-md focus:outline-4 focus:outline-offset-4 focus:outline-black"
            ><svg
              xmlns="http://www.w3.org/2000/svg"
              width="28"
              height="28"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2.5"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-chevron-right"
              ><path d="m9 18 6-6-6-6"></path></svg
            ></button
          >
        </div>
      </div>
    </div>
  </section>

  <style>
    .slider-window {
      @apply overflow-x-hidden w-full lg:h-full relative flex flex-col;
    }

    .slider {
      --quantity: 4;
      @apply absolute left-1/2 z-10 inset-0 my-auto w-[500px] h-[500px];

      transform: translateX(-50%) perspective(2000px) rotateY(0deg);
      transform-style: preserve-3d;
      transition: transform 0.5s ease-out;
    }

    .slider .item {
      @apply border absolute inset-0 overflow-clip rounded-md;

      transform: rotateY(
          calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg)
        )
        translateZ(650px);
    }

    @media screen and (max-width: 1350px) {
      .slider {
        @apply w-[450px] h-[450px];
      }

      .slider .item {
        transform: rotateY(
            calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg)
          )
          translateZ(550px);
      }
    }

    @media screen and (max-width: 1023px) {
      .slider-window {
        @apply h-[900px];
      }

      .slider {
        @apply w-[500px] h-[500px];
      }

      .slider .item {
        transform: rotateY(
            calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg)
          )
          translateZ(600px);
      }
    }

    @media screen and (max-width: 749px) {
      .slider-window {
        @apply h-[800px];
      }

      .slider {
        @apply w-[430px] h-[430px];
      }

      .slider .item {
        transform: rotateY(
            calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg)
          )
          translateZ(550px);
      }
    }

    @media screen and (max-width: 639px) {
      .slider-window {
        @apply h-[670px];
      }

      .slider {
        @apply w-[400px] h-[400px];
      }

      .slider .item {
        transform: rotateY(
            calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg)
          )
          translateZ(400px);
      }
    }

    @media screen and (max-width: 549px) {
      .slider-window {
        @apply h-[600px];
      }

      .slider {
        @apply w-[320px] h-[320px];
      }
    }

    @media screen and (max-width: 429px) {
      .slider-window {
        @apply h-[500px];
      }

      .slider {
        @apply w-[270px] h-[270px];
      }
    }

    @media screen and (max-width: 359px) {
      .slider-window {
        @apply h-[450px];
      }

      .slider {
        @apply w-[220px] h-[220px];
      }
    }
  </style>

  <script>
    const nextButton = document.getElementById(
      "next_button",
    ) as HTMLButtonElement;
    const prevButton = document.getElementById(
      "prev_button",
    ) as HTMLButtonElement;
    const articles = [
      document.getElementById("article_1"),
      document.getElementById("article_2"),
      document.getElementById("article_3"),
      document.getElementById("article_4"),
    ];
    let currentIndex = 0;
    const slider = document.getElementById("slider");

    const updateArticles = (newIndex: number) => {
      // Close all accordions in current article
      const currentAccordions = articles[currentIndex]?.querySelectorAll(
        '[id^="tech-stack-content-"], [id^="features-content-"], [id^="notes-content-"]',
      );
      currentAccordions?.forEach((elem) => {
        const accordion = elem as HTMLDivElement;
        accordion.style.height = "0";
      });

      // Reset all accordion buttons
      const currentButtons =
        articles[currentIndex]?.querySelectorAll('button[id$="-btn"]');
      currentButtons?.forEach((button) => {
        button.classList.remove("bg-black", "text-white");
        button.querySelector("svg")?.classList.remove("rotate-180");
      });

      // Update articles immediately
      articles.forEach((article, index) => {
        if (index === newIndex) {
          // activate new article
          article?.classList.remove("opacity-0", "z-0", "pointer-events-none");
          article?.classList.add("opacity-100", "z-30", "relative");
          article?.setAttribute("aria-hidden", "false");
          article?.removeAttribute("inert");
        } else {
          // Inactive articles
          article?.classList.remove("opacity-100", "z-30", "relative");
          article?.classList.add("opacity-0", "z-0", "pointer-events-none");
          article?.setAttribute("aria-hidden", "true");
          article?.setAttribute("inert", "true");
        }
      });

      // Update index and buttons
      currentIndex = newIndex;
      updateButtons();
    };

    let currentRotation = 0;
    const rotationStep = 360 / articles.length;

    const rotateSlider = (direction: "next" | "prev") => {
      if (direction === "next") {
        currentRotation -= rotationStep;
      } else {
        currentRotation += rotationStep;
      }

      slider!.style.transform = `translateX(-50%) perspective(2000px) rotateY(${currentRotation}deg)`;
    };

    nextButton?.addEventListener("click", () => {
      const nextIndex = (currentIndex + 1) % articles.length;
      updateArticles(nextIndex);
      rotateSlider("next");
    });

    prevButton?.addEventListener("click", () => {
      const prevIndex = (currentIndex - 1 + articles.length) % articles.length;
      updateArticles(prevIndex);
      rotateSlider("prev");
    });

    // disable buttons when at start/end
    const updateButtons = () => {
      if (prevButton && nextButton) {
        prevButton.disabled = currentIndex === 0;
        nextButton.disabled = currentIndex === articles.length - 1;
      }
    };

    // Initial button state
    updateButtons();

    // 3D IMAGE CAROUSEL
    // keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowRight" && !nextButton?.disabled) {
        nextButton?.click();
      } else if (e.key === "ArrowLeft" && !prevButton?.disabled) {
        prevButton?.click();
      }
    });

    // touch swipe support
    let touchStartX = 0;
    slider?.addEventListener("touchstart", (e) => {
      touchStartX = e.touches[0].clientX;
    });

    slider?.addEventListener("touchend", (e) => {
      const touchEndX = e.changedTouches[0].clientX;
      const difference = touchStartX - touchEndX;

      if (Math.abs(difference) > 50) {
        // Minimum swipe distance
        if (difference > 0 && !nextButton?.disabled) {
          nextButton?.click();
        } else if (difference < 0 && !prevButton?.disabled) {
          prevButton?.click();
        }
      }
    });
  </script>
</Layout>
